/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tarea16;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author MEDAC
 */
public class tarea extends javax.swing.JFrame {

    /**
     * Creates new form tarea
     */
    String ruta="";
    public tarea() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areatexto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CargarArchivo = new javax.swing.JMenuItem();
        GuardarArchivo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areatexto.setBackground(new java.awt.Color(153, 255, 153));
        areatexto.setColumns(20);
        areatexto.setRows(5);
        jScrollPane1.setViewportView(areatexto);

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 204, 0)));

        jMenu1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 153, 0)));
        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N

        CargarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        CargarArchivo.setText("Cargar archivo");
        CargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(CargarArchivo);

        GuardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        GuardarArchivo.setText("Guardar archivo");
        GuardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(GuardarArchivo);

        jMenuBar1.add(jMenu1);

        jMenu2.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 153, 0)));
        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N

        jMenuItem1.setText("Contar Caracteres");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Contar Vocales");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Contar Consonantes");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Contar Lineas");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Contar palabras");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * En cargar archivo mediante JFileChooser, una vez tenemos la ruta la metemos por parametro en la funcion leer archivo de texto para guardar
     * el texto en un string, y mediante .setText, metemos el texto en el textArea 
     * @param evt
     */
    private void CargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarArchivoActionPerformed

        //Sacamos la ruta
        
        JFileChooser fc= new JFileChooser();
        FileNameExtensionFilter filter=new FileNameExtensionFilter("Ficheros de texto","txt");
        fc.addChoosableFileFilter(filter);
        
        FileNameExtensionFilter filter2=new FileNameExtensionFilter("Ficheros java","java");
        fc.addChoosableFileFilter(filter2);
        
        fc.setSelectedFile(new File("fichero.txt"));
        
        int resultado=fc.showOpenDialog(null);
        if (resultado==JFileChooser.APPROVE_OPTION){
            this.ruta=fc.getSelectedFile().getAbsolutePath();
        }
        
        
        //Leemos el archivo
        String contenido=leerficherotexto(ruta);
        
        areatexto.setText(contenido);
        
        
        
        
        
    }//GEN-LAST:event_CargarArchivoActionPerformed

    /**
     * En guardar archivo, cogemos el texto que haya en ese momento en el TextArea mediante .getText() 
     * y con la funcion escribirFicheroDeTexto() actualizamos el documento
     * @param evt
     */
    private void GuardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarArchivoActionPerformed
        
        String contenido=areatexto.getText();
        
       
        
        escribirficherotexto(contenido, ruta);
    }//GEN-LAST:event_GuardarArchivoActionPerformed

    /**
     * Es el boton para contar el numero de caracteres, recorremos el string con un for i, y sumamos al contador s cada caracter que recora, despues 
     * mostramos el mensaje mediante JOptionPane 
     * @param evt
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String cont=areatexto.getText();
        int s=0;
        for(int i=0; i<cont.length(); i++){
            s+=1;            
        }
        
        
        String mensaje = "El numero de caracteres es "+s;
        String titulo = "Caracteres";
        JOptionPane.showMessageDialog(this,
            mensaje,
            titulo,
            JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed


    /**
     * Para contar el numero de vocales creamos un arrayList con las vocales en mayuscula y minusculas, y utilizamos el mismo método que en ela anterior
     * con la diferencia que meteremos un condicional que solo sumara al contador cuando el caracter este dentro del arrayList
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String cont=areatexto.getText();
        int s=0;
        ArrayList<Character> vocales=new ArrayList<>();
        vocales.add('a');
        vocales.add('e');
        vocales.add('i');
        vocales.add('o');
        vocales.add('u');
        vocales.add('A');
        vocales.add('E');
        vocales.add('I');
        vocales.add('O');
        vocales.add('U');
        
        
        for(int i=0; i<cont.length(); i++){
            if(vocales.contains(cont.charAt(i))){
            s+=1;}            
        }
        
        
        String mensaje = "El numero de vocales es "+s;
        String titulo = "Vocales";
        JOptionPane.showMessageDialog(this,
            mensaje,
            titulo,
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed


    /**
     * Para esta funcion utilizamos el mismo metodo pero al reves, cuando vocales.contains sea false añadimos uno al contador s
     * @param evt
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String cont=areatexto.getText();
        int s=0;
        ArrayList<Character> vocales=new ArrayList<>();
        vocales.add('a');
        vocales.add('e');
        vocales.add('i');
        vocales.add('o');
        vocales.add('u');
        vocales.add('A');
        vocales.add('E');
        vocales.add('I');
        vocales.add('O');
        vocales.add('U');
        
        
        for(int i=0; i<cont.length(); i++){
            if(vocales.contains(cont.charAt(i))==false){
            s+=1;}            
        }
        
        
        String mensaje = "El numero de consonantes es "+s;
        String titulo = "Consonantes";
        JOptionPane.showMessageDialog(this,
            mensaje,
            titulo,
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed



    //Leemos con contarlineas el fichero, usando bufferedReader que lee por lineas
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        int lineas=0;
        
        lineas=contarlineas(ruta);
        
        String mensaje = "El numero de lineas es "+lineas;
        String titulo = "Lineas";
        JOptionPane.showMessageDialog(this,
            mensaje,
            titulo,
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        String cont=areatexto.getText();
        int s=0;
        
          
        for(int i=0; i<cont.length(); i++){
            if(cont.charAt(i)==' ' || cont.charAt(i)=='.'){
            s+=1;}            
        }
        
        
        String mensaje = "El numero de palabras es "+s;
        String titulo = "Palabras";
        JOptionPane.showMessageDialog(this,
            mensaje,
            titulo,
            JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tarea.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tarea().setVisible(true);
            }
        });
    }
    
    public static void escribirficherotexto(String contenido, String ruta){
        FileWriter fw=null;
        PrintWriter pw=null;

        try {
            fw=new FileWriter(ruta);
            pw=new PrintWriter(fw);

            pw.write(contenido);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }finally{
            try {
                pw.close();fw.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }
    
    public static String leerficherotexto(String ruta){
        FileReader fr=null;
        BufferedReader br=null;
        String contenido="";

        try {
            fr=new FileReader(ruta);
            
            int data=fr.read();
            
            while(data!=-1){
                
                contenido+=(char)data;
                data=fr.read();
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }finally{
            try {br.close();fr.close();
                
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }return contenido;
    }
    
    public static int contarlineas(String ruta){
        FileReader fr=null;
        BufferedReader br=null;
        int lineas=0;

        try {
            fr=new FileReader(ruta);
            br=new BufferedReader(fr);
            
            String linea;

            while((linea=br.readLine())!=null){
                lineas+=1;
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }finally{
            try {br.close();fr.close();
                
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }return lineas; 
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CargarArchivo;
    private javax.swing.JMenuItem GuardarArchivo;
    private javax.swing.JTextArea areatexto;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
